How to use mbsStateMachineLeech
===============================

I designed this class to allow for synchronized state machines.

Using mbsStateMachine you can easily create a state machine to do anything you like, but if you
want to do two actions during the same state, like something during OnGUI and something in Update,
you would have to create a separate state machine for each action and update both each time a
state has to change. 

Using mbsStateMachineLeech you can latch one state machine onto another and use the same state
for both machines. This way you need only define what functions to call at which state and the
rest is taken care of by setting the first state machine as normal.

To use this class you need to do 4 things:
1. Create an mbsStateMachineLeech variable
2. ...that uses the same enum type as an existing mbsStateMachine variable
3. ...and pass that existing variable as part of the constructor.
4. Finally, just call PerformAction() as usual.

Example:
	public enum eState {State1, State2, State3}
	public mbsStateMachine<eState>		UpdateState = new mbsStateMachine<eState>();
	public mbsStateMachineLeech<eState>	OnGUIState	= new mbsStateMachineLeech<eState>(UpdateState);
	
Example use: See mbsStateTest.cs

    -- FUNCTION LIST ----------------------------------------- 

    AddState(SomeState, SomeFunction = null)            Link a function to a state
    CompareState(SomeState)                             See if CurrentState is the same as SomeState
    PerformAction()                                     Perform an appropriate function based on CurrentState

    -- PROPERTIES -------------------------------------------- 

    CurrentState                                        Returns the current state of the variable
